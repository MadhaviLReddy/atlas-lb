#!/usr/bin/env jython

import org.hexp.hibernateexp.util.SslNonsense.SecurityBorker as SecurityBorker
import util
util.setConfig("stag.json",skipDb=True)
from util import *

import xmlrpclib
import re
import sys
import os

ssl_re = re.compile("^ssl[0-9]+$")

baseSubj = "C=US,ST=Texas,L=San Antonio,O=RackExp,OU=client TestSites"

SecurityBorker.bork()	

def usage(prog):
    printf("usage is %s <chain.json> <dnsxmlrpcconf.json> <baseDomain> ",prog)
    printf("<Shared ip> <LbName> <number> <certsout.json>\n")
    

if __name__ == "__main__":
    prog = os.path.basename(sys.argv[0])
    if len(sys.argv)<8:
        usage(prog)
        sys.exit()
    chain = load_json(sys.argv[1])
    dnsconf = load_json(sys.argv[2])
    basedomain = sys.argv[3]
    ip = sys.argv[4]
    vsName = sys.argv[5]
    ni = int(sys.argv[6])
    cert_json = sys.argv[7]
    
    keyPem = String(chain[0]["key"]).getBytes("US-ASCII")
    caKey = RsaPair(PemUtils.fromPem(keyPem))

    caPem = String(chain[0]["crt"]).getBytes("US-ASCII")
    caCrt = PemUtils.fromPem(caPem)

    chainStr = ""
    for entry in chain:
        chainStr += entry["crt"]

    baseConf = dnsconf["domains"][basedomain]
    baseHost = baseConf["baseDomain"]
    cred     = baseConf["cred"]
    url      = baseConf["url"]    

    s = xmlrpclib.ServerProxy(url)
    

    certs = {}
    for i in xrange(1,ni+1):
        host = "ssl%i"%i
        subj = "%s,CN=%s%s"%(baseSubj,host,baseHost)
        printf("Creating csr for subj \"%s\"\n",subj)
        clientKey = RSAKeyUtils.genRSAPair(2048,32)
        csr = CsrUtils.newCsr(subj,clientKey,False)
        crt = CertUtils.signCSR(csr,caKey,caCrt,730,None)
        certBlock = {}
        certBlock["key"] = "%s"%String(toPem(clientKey),"US-ASCII")
        certBlock["csr"] = "%s"%String(toPem(csr),"US-ASCII")
        certBlock["crt"] = "%s"%String(toPem(crt),"US-ASCII")
        certBlock["chain"] = "%s%s"%(chainStr,certBlock["crt"])
        certs[host] = certBlock
    save_json(cert_json,certs)
